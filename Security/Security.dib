#!markdown

# Security in Powershell

## Obvious Stuff
1) Lock down permissions to your solutions
    1) Having poor permissioning on your scripts can lead to edits and secrets being leaked.
1) Do not use Invoke-Experssion
    1) Be careful with user input in general
1) Beware of Over-The-Shoulder Logging
    1) Event log tracks your scripts
    1) Command lines can be seen in Task Manager

#!pwsh

$username = 'Administrator'
$Password = 'P@ssw0rd'
E:\ITStuff\Utilities\SysInternals\PSExec.exe -u $username -p $Password cmd /k 




# Plain Text passwords
GPEdit
# GPEDIT Computersystem/Administrative templates/Windows Componants/windows Powershell

$username = 'Administrator'
$Password = 'P@ssw0rd'
$Cred = [PScredential]::new($username, (ConvertTo-SecureString -String $Password -AsPlainText -Force))
Get-WinEvent -LogName Microsoft-Windows-PowerShell/Operational -MaxEvents 10 
Get-WinEvent -LogName 'Windows PowerShell' -MaxEvents 20 

[void][PSCustomObject]@{
Server = "localhost"
username = $Username
PWd =  $cred.GetNetworkCredential().password}



EventVwr.msc

# 800

#!markdown

## Secrets
    1) There are a lot of tools to secure your passwords, tokens and other secrets. 
    1) Security is a time track but that does not mean you can do nothing to secure secrets.
    1) Separating secrets like usernames from passwords is a good idea. 

### DPAPI
    1) Data Protection API is a good solution for some solutions based on AES encryption and built into windows. 
        1) User Keys:  %userprofile%\AppData\Roaming\Microsoft\Protect
        1) Computer Keys: %windir%\system32\microsoft\protect
    1) DPAPI is easy to use. 
        1) Browser secrets
        1) Certificates
        1) Biometrics data
        1) Credential Manager
    1) Anyone can decrypt with the user's context

#!pwsh

#Encrypt DPAPI

$secure = ConvertTo-SecureString -String â€˜Password123' -AsPlainText -Force 
$SecureString  = ConvertFrom-SecureString -SecureString $secure
$SecureString

#!pwsh

# Decoding DPAPI

$securestring = ConvertTo-SecureString -String $SecureString
[System.Runtime.InteropServices.marshal]::PtrToStringAuto([System.Runtime.InteropServices.marshal]::SecureStringToBSTR($securestring))

#!markdown

### Sympetric Encryption

#!pwsh

# Encoding Symtric 

$Userinput = 'someParam2Secure'
$keybytes = [System.Text.Encoding]::UTF8.GetBytes($Userinput)
[Byte[]] $Key = [System.Security.Cryptography.HashAlgorithm]::Create('SHA256').ComputeHash($keybytes)

$secure = ConvertTo-SecureString -String 'Password123' -AsPlainText -Force 
ConvertFrom-SecureString -SecureString $secure -Key $key

#!pwsh

# Decoding Semetric
$securestring = ConvertTo-SecureString -Key $key -String '76492d1116743f0423413b16050a5345MgB8AEcAaABEAE4AZgAyAG0ASgBJADgAMABoAGwASQBIACsAMQBRAGMAbQBmAGcAPQA9AHwAZQAwADEAZgAzADcAOQBlADkAOAAyAGYAOQAzAGQAOQBhAGMAZQBiAGUANgBlAGEAYQA3ADgANAAzADUAYQAxAGMAMQBhAGIAYQA2ADYAYgAyADkANABjAGYAZQBkAGYAZQAyADUAMQBmADcAZAAwAGQAMgA3ADIANgBmADMANgA='
[System.Runtime.InteropServices.marshal]::PtrToStringAuto([System.Runtime.InteropServices.marshal]::SecureStringToBSTR($securestring))
